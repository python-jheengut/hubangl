#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is part of HUBAngl.
# HUBAngl Uses Broadcaster Angle
#
# HUBAngl is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# HUBAngl is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with HUBAngl.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (c) 2016-2018 David Test√©

import argparse
import json
import logging
import logging.handlers
import pathlib
import sys

import gi
gi.require_version("Gst", "1.0")  # NOQA
gi.require_version('Gtk', '3.0')  # NOQA
from gi.repository import Gst
from gi.repository import Gtk

import core.watch
import gui.main_window


LOG_FORMAT = "hubangl: %(asctime)s [%(levelname)s] %(message)s"
DEFAULT_LOG_PATH = "/var/log/hubangl"

VERSION = "0.2.0"  # TODO: Fecth version from version.py

logger = None


def setup_logger(options):
    """
    Initialize logging facility

    :param options: options from command-line
    """
    global logger
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG if options.debug else logging.INFO)

    directory = pathlib.Path(options.log_output)
    try:
        directory.mkdir(parents=True, exist_ok=True)
    except PermissionError:
        # Don't log into file if user doesn't have the right permissions
        pass
    else:
        filename = str(directory.joinpath("hubangl.log"))
        # Rotate log files on a daily basis.
        log_rotate = logging.handlers.TimedRotatingFileHandler(filename, when="D")
        _add_log_handler(logger, log_rotate)

    if not options.quiet:
        stdout = logging.StreamHandler(sys.stdout)
        _add_log_handler(logger, stdout)


def _add_log_handler(logger, handler, formatt=LOG_FORMAT):
    handler.setFormatter(logging.Formatter(formatt))
    logger.addHandler(handler)


def _huba_file(filename):
    """
    Determine if ``filename`` is a .huba file, if not it will raise an error.

    :param filename: user input as :class:`str`

    :return: absolute path to ``filename``
    """
    filepath = pathlib.Path(filename)

    try:
        with filepath.open() as f:
            session = json.load(f)
            # Checking if session file contains at least the minimal keys set:
            for field in ("video", "audio", "settings"):
                session[field]
    except FileNotFoundError:
        message = "File provided was not found."
    except KeyError:
        message = "File provided is not formatted correctly."
    except ValueError:
        # An error occured during decoding JSON file.
        message = "File provided could not be decoded."
    else:
        return str(filepath.resolve())

    raise argparse.ArgumentTypeError(message)


def create_input_args():
    """
    Create input arguments available to user.

    :return: :class:`argparse.ArgumentParser`
    """
    description = """
        HUBAngl Uses Broadcaster Angle\n
        HUBAngl broadcast audio and video feeds.
    """
    parser = argparse.ArgumentParser(description)

    parser.add_argument("-d", "--debug", action="store_true",
                        help="Launch in debug mode")
    parser.add_argument("-l", "--load", type=_huba_file,
                        help="load session file at startup")
    parser.add_argument("-o", "--log-output", dest="log_output",
                        default="/var/log/hubangl",
                        help="path to directory to store logs")
    parser.add_argument("-q", "--quiet", action="store_true",
                        help="do not print log on stdout")
    parser.add_argument("-v", "--version", action="version",
                        version=("HUBAngl v" + VERSION))
    return parser


if __name__ == "__main__":
    args = create_input_args().parse_args()

    setup_logger(args)
    logger.info("Starting up hubangl")

    core.watch.setup()

    Gst.init(None)
    gui.main_window.MainWindow(args)
    Gtk.main()

    logger.info("Shutting down hubangl "
                "(this could take up to {} seconds)".format(
                    core.watch.REMOTE_CHECK_FREQUENCY))
    core.watch.shutdown()
    logging.shutdown()
